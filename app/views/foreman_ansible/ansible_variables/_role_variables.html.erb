<% lookup_keys = AnsibleVariable.where(:ansible_role_id => ansiblerole.id, :override => true) %>
<% values_hash = obj.is_a?(Hostgroup) ? {} : lookup_keys.inherited_values(obj).raw %>
<% lookup_keys.each_with_index do |lookup_key, index| %>
  <% lookup_value = lookup_value(obj, lookup_key) %>
  <%
    # LookupValue#match is generated automatically by Host#lookup_values_attributes=
    # from the name, so don't present errors directly to the user.Â  Any validation
    # errors should also be visible against the Host#name field.
    if lookup_value.errors[:match].any?
        logger.debug("Ignoring #{lookup_value.inspect} match errors: #{lookup_value.errors[:match]}")
        lookup_value.errors.delete(:match)
    end
  %>
  <% overridden = lookup_key.overridden?(obj) %>
  <% error = lookup_value.errors %>
  <tr id="ansiblerole_<%= ansiblerole.id %>_params[<%= lookup_key.id %>]"
    class="fields <%= 'overridden' if overridden %>">
    <%= content_tag(:td, ansiblerole.name, :rowspan => lookup_keys.size, :class => "ellipsis") if index == 0 %>
    <td class="ellipsis param_name">
      <%= lookup_key.key %>
    </td>
    <td <%= "class=has-error" if error.present? %>>
      <div class="input-group">
        <%= ansible_lookup_key_with_diagnostic(obj, values_hash, lookup_key, lookup_value) %>
        <span class="input-group-btn">
          <%= hidden_toggle(lookup_key.hidden_value?, 'font', 'font', true) if lookup_key.hidden_value? %>
          <%= fullscreen_button("$(this).parent().prev()") unless lookup_key.key_type == "boolean" %>
          <%= override_toggle(overridden) %>
        </span>
      </div>
      <%= content_tag(:span, error.full_messages.to_sentence, :class => "help-block") if error.present? %>
    </td>
    <td class="ca">
      <%= check_box(lookup_value_name_prefix(lookup_key.id), :omit,
                    :value    => lookup_value.id,
                    :disabled => !overridden || !can_edit_params?,
                    :onchange => "toggleOmitValue(this, 'value')",
                    :hidden   => !overridden,
                    :title    => _('Omit from classification output'),
                    :checked  => lookup_value.omit)
      %>
      <%= hidden_lookup_value_fields(lookup_key, lookup_value, !overridden) %>

    </td>
  </tr>
<% end %>